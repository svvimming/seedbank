:root {
  --main-bg-color: rgb(34, 202, 160);
  --main-primary-color: rgb(248, 248, 248);
  --main-highlight-color: rgb(241, 59, 217);
  --main-selection-color: #777777;
  --default: "#9da6a4";
  --primary: "#382922";
  --success: "#64ac69";
  --warning: "#e29c31";
  --danger: "#f44336";
}

/* styling for randomlinkcomponent ---- begins */

.dot {
  height: 1px;
  width: 1px;
  /* border-radius: 50%; */

  position: absolute;
  z-index: 100;
  border: 1rem dotted transparent;
}

a.dotcontainer:hover .dot {
  border: 0.1rem solid deeppink;
  opacity: 0.7;
}

a.dotcontainer:visited .dot {
  border: 0.1rem dotted yellow;
}

a.dotcontainer .dot {
  border: 0.1rem dotted transparent;
}

/* styling for random comonent ---- ends */

/* styling for randomthingycomonent ---- begins */

.thingy {
  transform: scale(0.2);
  /* transform: scale(0.6); */
  /* height: 250px; */
  /* width: 150px; */
  /* height: 250px; */
  /* //if i don't state a width every image will just load 'as is' */
  z-index: 10;
  position: fixed;
  background-repeat: no-repeat;
}

/*
.thingy:active {
  touch-action: none;
  user-select: none;
} */

.thingy:hover {
  cursor: pointer;
  /* border-width: 20px;
  border: 3px solid rgba(249, 151, 3, 0.852); */
}

.thingycontainer {
  z-index: 10;
}

/* styling for randomthingycomonent ---- ends */

/* styling for test div for database elements */

.database {
  /* border-radius: 50%; */
  color: white;
  position: absolute;
  z-index: 100;
  padding: 1rem;
  border: 0.2rem dotted transparent;
}

.database:hover {
  color: black;
  background-color: transparent;
  /*because the background color on the database element was dynamically assigned via js in the component i believe that's why this css stying for transparent isn't being applied it takes less presedence over the js*/
  border: 0.2rem solid white;
}

.databasecontainer a:hover {
  color: black;
}

/*styling for test image appended to each event type loading into RandomList component
*/
.threshold {
  position: absolute;
  width: 30px;
  height: 30px;
}

/*glitch test dynamic element created in relation to location instances in database*/

.locationmark {
  position: relative;
  width: 10px;
  height: 10px;
  border-radius: 50%;
}

.location {
  transform: scale(0.2);
  position: absolute;
}

.locationcontainer {
  position: absolute;
}

/* styling for plobchain component below */

.textfield {
  position: relative;
  background: transparent;
  top: 30px;
  border: none;
  font-weight: bold;
  overflow: auto;
  outline: none;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  resize: none;
  opacity: 100%;
  /* font: 14px "Century Gothic", Futura, sans-serif;
  margin: 20px; */
}

.okie{
  position: relative;
  top: 36px;
}

.roundfloat {
  position: absolute;
  background: transparent;
  overflow-wrap: break-word;
  display: inline-block;
}

.floatLeft {
  float: left;
  shape-outside: url("./assets/templates/left.png");
  overflow-wrap: break-word;
  opacity: 0.0;
}

.floatRight {
  float: right;
  shape-outside: url("./assets/templates/right.png");
  overflow-wrap: break-word;
  opacity: 0.0;
}


.plobtext {
    text-align: left;
    overflow-wrap: break-word;
}

body {
  font: 18px "Century Gothic", Futura, sans-serif;
  margin: 20px;
}

p {
  z-index: 999;
}
